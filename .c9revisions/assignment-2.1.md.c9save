{"ts":1358611611940,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1358611913462,"patch":[[{"diffs":[[1,"**//\n\n3 different methods getting the date for todat tomorrw and yesterday\n\n\nMethods\n\nFor methods available on Date instances, see Methods of Date instances.\n\nnow\nReturns the numeric value corresponding to the current time.\nparse\nParses a string representation of a JavaScript date, and returns the number of milliseconds since January 1, 1970, 00:00:00, local time.\nUTC\nAccepts the same parameters as the longest form of the constructor, and returns the number of milliseconds in a JavaScript Date object since January 1, 1970, 00:00:00, universal time."]],"start1":0,"start2":0,"length1":0,"length2":554}]],"length":554,"saved":false}
{"ts":1358611945578,"patch":[[{"diffs":[[0,"**//\n\n"],[-1,""],[0,""],[1,"1) "],[0,"3 differ"]],"start1":0,"start2":0,"length1":14,"length2":17},{"diffs":[[0,"s.\n\nnow\n"],[1,"    "],[0,"Returns "]],"start1":158,"start2":158,"length1":16,"length2":20},{"diffs":[[0,"me.\n"],[1,"    \n"],[0,"parse\n"],[1,"    "],[0,"Pars"]],"start1":227,"start2":227,"length1":14,"length2":23},{"diffs":[[0,"me.\n"],[-1,"UTC\n"],[1,"    \nUTC\n    "],[0,"Acce"]],"start1":379,"start2":379,"length1":12,"length2":21},{"diffs":[[0," object "],[1,"\n    "],[0,"since Ja"]],"start1":523,"start2":523,"length1":16,"length2":21}]],"length":584,"saved":false}
{"ts":1358612243939,"patch":[[{"diffs":[[0," universal time."],[1,"\n    \n    \n```\n Methods inherited from Function:\napply, call, toSource, toString\n```\n\n\n\n2)What does the Math.ceil() built-in function do? What is the default return value? What are some other built-in functions that do something similar?\n    Returns the smallest integer greater than or equal to a number.\n    \n ```\n Example: Using Math.ceil\n\nThe following example shows example usage of Math.ceil().\n\n1\n2\n3\nMath.ceil(.95); // 1\nMath.ceil(4); // 4\nMath.ceil(7.004) // 8\n```\n\n\n\n3)What is the NaN type in Javascript and what does it stand for? When would you encounter it?\n\n    A value representing Not-A-Number.\n    \n    NaN is a property of the global object.\n\nThe initial value of NaN is Not-A-Number â€” the same as the value of Number.NaN. In modern browsers, NaN is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it.\n\nIt is rather rare to use NaN in a program. It is the returned value when Math functions fail (Math.sqrt(-1)) or when a function trying to parse a number fails (parseInt(\"blabla\")).\n\nTesting against NaN\n\nEquality operator (== and ===) cannot be used to test a value against NaN. Use isNaN instead.\n\n1\n2\n3\n4\n```\nNaN === NaN;        // false\nNumber.NaN === NaN; // false\nisNaN(NaN);         // true\nisNaN(Number.NaN);  // true\n```\n\n\n\n"]],"start1":568,"start2":568,"length1":16,"length2":1312}]],"length":1880,"saved":false}
{"ts":1358612839031,"patch":[[{"diffs":[[0,"terday\n\n"],[1,"Creates JavaScript Date instances which let you work with dates and times.\n\nnew Date();\nnew Date(value);\nnew Date(dateString);\nnew Date(year, month, day [, hour, minute, second, millisecond]);\n\n"],[0,"\nMethods"]],"start1":71,"start2":71,"length1":16,"length2":210},{"diffs":[[0,"imilar?\n"],[1,"    "],[0,"    Retu"]],"start1":1008,"start2":1008,"length1":16,"length2":20},{"diffs":[[0,"    "],[-1,"\n ```\n"],[1,"    \n     ```\n    "],[0," Exa"]],"start1":1088,"start2":1088,"length1":14,"length2":26},{"diffs":[[0,"th.ceil\n"],[-1,"\n"],[1,"    \n    "],[0,"The foll"]],"start1":1128,"start2":1128,"length1":17,"length2":25},{"diffs":[[0,"ceil().\n"],[-1,"\n1\n2\n3\n"],[1,"    \n    1\n    2\n    3\n    "],[0,"Math.cei"]],"start1":1195,"start2":1195,"length1":23,"length2":43},{"diffs":[[0,"); // 1\n"],[1,"    "],[0,"Math.cei"]],"start1":1243,"start2":1243,"length1":16,"length2":20},{"diffs":[[0,"); // 4\n"],[1,"    "],[0,"Math.cei"]],"start1":1266,"start2":1266,"length1":16,"length2":20},{"diffs":[[0,"4) // 8\n"],[-1,"```"],[1,"    ```\n\n\n\n    Because floor is a static method of Math, you always use it as Math.floor(), rather than as a method of a Math object you created.\n    floor:\n    \n    ```\n    function getFloor(x) {\n       return Math.floor(x);\n    }\n    ```\n"],[0,"\n\n\n\n3)Wh"]],"start1":1292,"start2":1292,"length1":19,"length2":256},{"diffs":[[0," // true\n```\n\n\n\n"],[1,"\n4)\nHow would I find the largest possible value that can be represented Javascript? What about the smallest?\n\n    MAX_VALUE\nThe largest positive representable number.  The largest negative representable number is -MAX_VALUE.\n\n\n    MIN_VALUE\nThe smallest positive representable number -- that is, the positive number closest to zero (without actually being zero). \nThe smallest negative representable number is -MIN_VALUE.\n"]],"start1":2347,"start2":2347,"length1":16,"length2":438}]],"length":2785,"saved":false}
{"ts":1358613099993,"patch":[[{"diffs":[[0,"operty. "],[1,"\n"],[0,"Even whe"]],"start1":1870,"start2":1870,"length1":16,"length2":17},{"diffs":[[0,"to parse"],[-1," "],[1,"\n"],[0,"a number"]],"start1":2068,"start2":2068,"length1":17,"length2":17}]],"length":2786,"saved":false}
